오픈소스를 활용한 DevOps 환경 이해 강좌에 오신 것을 환영합니다.

1주차는 DevOps와 오픈소스 소프트웨어 라는 주제로 강의가 진행될 예정입니다.

학습목표는

1. DevOps와 오픈소스 소프트웨어의 주요 개념을 이해할 수 있다.

2. DevOps 주요 활동과 사례를 통해 DevOps 공정을 이해할 수 있다.

3. DevOps 영역 별 대표적인 오픈소스 도구에 대해서 파악할 수 있다.

입니다.

Week 1

안녕하세요? SK주식회사 CNC 이정민 수석입니다.
오픈소스를 활용한 데브옵스 환경에 의해 강좌의 첫 번째 시간, 데브옵스와 오픈소스 소프트웨어 강의를 시작합니다.
이번 주 차 강의를 통해서 여러분은 데브옵스와 오픈소스 소프트웨어의 주요 개념을 이해하고 데브옵스의 주요 활동과 공정을 이해하실 수 있습니다.
이해를 돕기 위해서 데브옵스의 주요 영역별 사례와 대표적으로 사용되는 오픈소스 도구도 함께 소개해드리겠습니다.
요즘 시대를 4차 산업혁명의 시대라고 합니다.
기술 변화는 가속화되고 있고 제조, 서비스, 의료, 금융 등 산업 전반에서 소프트웨어를 기반으로 새로운 서비스들이 쏟아지고 있습니다.
고객의 새로운 요구를 맞추기 위해서 매일 새로운 앱들이 출시되고 있고, 이미 출시된 앱들도 하루가 멀다 하고 업그레이드 되는 상황입니다.
한 번 출시되고 사용된다고 해서 일이 끝난 것이 아닙니다.
미래는 불확실하고 고객의 요구와 시장의 변화는 종잡을 수 없기 때문에 한 번에 성공하기란 하늘의 별따기와 같습니다.
시장의 변화와 고객의 요구를 빠르게 대응하는 것이 중요합니다.
빠르게 시도해보고, 빠르게 실패하면서 시행착오와 반복을 통해서 점진적으로 서비스를 개선해 나가는 것만이 현재로써는 최선의 방법입니다.
이를 위해서 신속하게 소프트웨어를 개발하고 변경할 수 있어야 합니다. 그리고 변경된 내용이 문제는 없는지 검증도 철저히 해야 합니다.
그리고 이 과정은 실수없이 지속적으로 반복되어야 하는데 과연 정말 이런 방식으로 소프트웨어 서비스를 개발하고 운용할 수 있을까요? 이것에 대한 해답이 바로 데브옵스입니다.
데브옵스는 기술과 시장의 빠른 변화에 대응하기 위한 최신의 소프트웨어 개발 운영 트렌드입니다.
데브옵스란 용어는 소프트웨어 개발을 뜻하는 디벨롭먼트와 운영을 뜻하는 오퍼레이션의 합성어입니다.
기존에는 개발과 운영, 단계로 나누고 개발과 운영 업무를 나누고 개발과 운영 팀을 나누어서 일을 했다면 데브옵스는 개발과 운영의 컬래버레이션을 추구하는 방식입니다.
과거에는 역할에 따라 경계를 나누었기 때문에 일하는 데 장벽이 있었습니다.
실제로 일을 하다보면 가장 큰 문제는 이 역할과 경계에 속하지 않는 회색지대에서 발생하게 됩니다. 많은 분이 공감하실 겁니다.
데브옵스는 소통과 협업을 통해서 경계와 장벽을 없애려는 노력이고, 통합을 중요시하는 사상입니다. 사상이라는 단어로 표현하는 이유가 있습니다.
데브옵스는 특정한 기술이나 도구만을 지칭하는 것이 아니라 프로세스, 조직, 문화 등을 망라하는 매우 포괄적인 개념이기 때문입니다.
중요한 것은 서비스입니다. 고객에게 제공하는 서비스가 제일 중심에 있고, 그 서비스를 원활하게 제공하기 위해서 필요한 것.
그것을 서비스 중심으로 통합하는 것이 데브옵스의 시작입니다. 그렇다면 서비스 중심으로 통합한다는 것은 무엇인지 살펴보겠습니다.
개발은 요구사항에 따라서 아키텍쳐에 기반 한 설계 개발을 수행합니다. 운영은 그 개발의 결과물을 안정적으로 서비스하기 위한 활동입니다.
이 모든 것을 일정 수준의 품질로 유지하지 못한다면 실패할 확률이 높아집니다.
즉 개발, 운영, 품질 이 세 가지 요소는 개별적으로는 의미가 있는 것이 아니라 통합적으로 잘 이루어질 때 의미가 있습니다.
그림에서 보듯이 개발, 운영, 품질이 통합되는 교집합에 바로 데브옵스가 있습니다. 보통 이 교집합 부분에서 제일 많은 병목과 지연, 비용이 발생합니다.
좋은 품질의 서비스를 지속적으로 개선하면서도 안정적으로 제공하려면 바로 이 교집합, 통합적 관점으로 접근해야 합니다.
그래서 본 강좌는 특정한 부분만을 중심적으로 다루지는 않습니다.
개발 영역, 요구사항, 아키텍쳐 설계 개발의 구체적이고 상세한 내용은 마이크로 서비스 설계 개발 강좌를 참고하시기 바랍니다.
본 강좌는 개발과 운용의 전반적인 흐름, 특히 1주차에서 4주차까지는 개발 운용을 지속적으로 통합하는 측면을 다룰 예정입니다.
5주차부터는 품질 측면에서 소스 코드, 정적 분석, 리펙토링, 테스트 전반을 다룰 예정입니다.
그렇다면 데브옵스를 통해서 달성하고자 하는 것은 무엇일까요? 첫 번째는 소프트웨어를 더 빠르고 더 자주 배포하는 것입니다.
한 달에 한 번에서 일주일에 한 번으로, 하루에 한 번으로. 더 나아가 매시간 수시로 변경 배포할 수 있어야 합니다.
만일 배포를 자주 실패한다거나 실패했을 때 복구가 어렵다면 빠르고 자주 배포하는 것은 의미가 없을 것입니다.
실패할 확률은 낮추고 실패하더라도 빠르게 복구가 가능해야 합니다. 높은 품질의 서비스를 안정적으로 제공하는 것이 핵심입니다.
이를 위해서 시간과 비용이 많이 들고 실수할 여지가 많은 사람 중심의 수작업이 아니라 시스템 기반으로 자동화하고 모든 과정은 자동으로 측정되어야 합니다.
궁극적으로 이 모든 것은 비용을 절감하기 위한 것입니다.
데브옵스의 목표는 서비스를 지속적으로 개선하고 제공하기 위하여 최소의 비용으로 최고의 효율을 추가하는 것이라고 할 수 있습니다.
그렇다면 데브옵스가 가능해진 가장 큰 이유가 무엇일까요? 여러 가지 이유를 생각해볼 수 있겠지만 저는 가장 근본적인 이유로 오픈소스 소프트웨어 모델의 성공을 꼽고 싶습니다.
데브옵스를 이루는 많은 기술은 오픈소스 소프트웨어를 기반으로 합니다. 오픈소스 소프트웨어는 이미 대중화되었고 소프트웨어 산업 전반에서 대세가 되었습니다.
이미 검증된 오픈소스 소프트웨어가 폭넓게 퍼져 있습니다.
데브옵스 환경은 상황에 따라 다양한 소프트웨어로 구성되고 조합하게 되는데 이때 오픈소스 소프트웨어의 유연성, 호환성은 매우 큰 장점입니다.
특히 상황에 따라 소스 코드 변경이 필요한 경우 즉각적으로 조치가 가능하기 때문에 기술과 시장의 변화에 빠르게 대응해야 하는 데브옵스에 매우 적합합니다.
구글, IBM, 마이크로소프트, 페이스북, 넷플릭스 등 최첨단의 아이디어와 기술을 선도하는 기업들이 오픈소스를 주도하고 있습니다.
오픈소스 프로젝트를 직접 이끌거나 지원하고 있으며 주요 오픈소스 프로젝트를 이끄는 기업들을 인수하기도 합니다.
공유와 협업을 기반으로 하는 오픈소스 커뮤니티가 활성화되면 될수록 데브옵스를 위한 새로운 아이디어가 시도되고 활발해질 것입니다.
이것은 기업의 비용절감과 효율성을 제고시켜서 기업의 경쟁력을 강화시켜줄 것이고, 이것은 다시 지속적으로 선순환 생태계를 이룰 것입니다.
오픈소스 소프트웨어에 대해서 조금 더 살펴보겠습니다. 오픈소스 설명은 매우 방대해질 수 있습니다.
하지만 이 강좌에서는 오픈소스라는 개념 자체에 대한 이해보다는 오픈소스 소프트웨어를 직접 사용해보는 데 중심을 둘 것입니다.
따라서 설명은 간단한 상식 이해를 위한 수준으로 소개해드리고자 합니다.
오픈소스 소프트웨어란 소스코드를 공개하여 특별한 재원없이 사용 가능한 소프트웨어를 말합니다.
원 저작자가 정해놓은 범위, 라이선스에 따른 의무를 따르는 범위 내에서는 소스 코드를 자유롭게 사용할 수 있습니다.
누구에게나 열려있기 때문에 소스코드를 열람하거나 프로젝트에 직접 참여할 수 있습니다. 단순히 사용만 할 수도 있고 프로젝트에 도움을 주는 컨트리뷰터로 활동할 수도 있습니다.
혹은 조금 더 적극적으로 권한과 책임을 가지는 일에 참여할 수도 있습니다. 오픈소스의 장점은 저비용으로 자유롭게 소스코드를 복제, 수정, 배포할 수 있다는 것입니다.
반면 단점은 공개의 의무가 있고 직접 운영, 유지, 보수하는 것은 쉽지 않습니다. 하지만 비용을 들여서 유지 보수 및 지원 서비스를 받을 수는 있습니다.
오픈소스 라이선스는 오픈소스 소프트웨어 이용에 대한 조건을 규정한 것으로 위반 시 리스크가 있습니다.
오픈의 의미는 누구에게나 개방한다는 의미이지 모든 것이 허용되는 것은 아니고 무료라는 것도 아니기 때문입니다.
실제로 기업 활동에서 오픈소스 사용과 관련된 리스크는 매우 크기 때문에 오픈소스 사용을 전담하여 관리하고 있습니다.
오픈소스 사용을 잘못 사용한 경우에는 핵심 제품의 소스 코드를 공개해야 하거나 저작권 침해로 소송을 당하는 상황이 발생할 수 있기 때문에 주의해야 합니다.
오픈소스 라이선스는 단일한 형태가 아니고 매우 방대하고 복잡합니다. 대표적인 오픈소스와 라이선스에 대해서 짧게 살펴보겠습니다.
위에서부터 아래로 리스크가 높은 순서입니다. 리눅스 커널과 마리아DB는 GPL 라이선스입니다.
소스 수정뿐 아니라 링크에서 사용하더라도 소스를 공개해야 하는 의무가 있습니다. 빅데이터 분야에 대표적인 오픈소스 프로젝트인 하둡은 아파치 라이선스입니다.
아파치 라이선스는 특별한 공개의 의무나 범위는 없습니다.
오픈소스 라이선스별 주요 의무사항에 대해서 조금 더 살펴보겠습니다.
복제, 배포, 수정, 권한의 허용, 배포 시 라이선스 사본 첨부, 저작권 고지사항 유지, 수정내용 고지 등의 의무사항이 있습니다.
왼쪽에서부터 오른쪽 방향으로 라이선스별 지켜야 할 의무사항이 많습니다.
오픈소스 라이선스는 기업 활동에서 매우 리스크가 있을 수 있기 때문에 정확한 내용은 법무팀 또는 변호사와 상담이 필요합니다.
정보통신산업진흥원의 공개 소프트웨어 포탈이나 한국저작권위원회의 오픈소스 소프트웨어 라이선스 종합정보시스템을 참조하시기 바랍니다.

